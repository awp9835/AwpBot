import java.lang.*;
import java.util.*;
import java.net.*;
import java.io.*;
import org.json.*;
import org.java_websocket.WebSocket;
import org.java_websocket.handshake.ClientHandshake;
import org.java_websocket.server.WebSocketServer;


public class AsftInt
{
	public static int parseInt(String s);
}
public interface AwpBotInterface
{
	public String getBotId();
	public WebSocket getApiWs();
	public WebSocket getEventWs();
	public static boolean sendMessage(WebSocket ws,String s);
}
public interface AwpBotComponent
{
	public boolean save(AwpBotInterface bot); //return succeed
	public boolean load(AwpBotInterface bot); //return no except
	public String handle(String event, AwpBotInterface bot); //return global command string
	public String getComponentName();
}
public class AsftPair <T1,T2> implements Serializable
{
	public T1 First;
	public T2 Second;
	public T1 first();
	public T2 second();
	public AsftPair(T1 t1,T2 t2);
}


public class AwpBot implements AwpBotInterface, Runnable
{	
	protected class InnerWebSocketServer extends WebSocketServer
	{
		public volatile WebSocket EventWs;
		public volatile WebSocket ApiWs;
		public volatile String BotId;
		public volatile String AccessToken;
	}
	
	protected InnerWebSocketServer Server;
	protected ConcurrentLinkedQueue<String> EventQueue;
	protected Vector<AwpBotComponent> Components;

	
	protected void config();	//set components and authorization and other, except port. You must modify this function.

	protected void save();		//save components and components data
	protected void load();		//load components data and their config

	protected boolean excommand(String command);	//exec AwpBotComponent.handle() result and return whether continue foreach components
	protected void startws();	//start inner websocket server 
	
	public AwpBot(int port) throws UnknownHostException;

	@Override
	public String getBotId();
	@Override
	public WebSocket getApiWs();
	@Override
	public WebSocket getEventWs();

	@Override
	public void run();

	public static void main(String args[]) throws InterruptedException,UnknownHostException;
	
}

public final class AsftOneBotMessage
{
	public static boolean paraIsTrue(String str);

	public static AsftOneBotMessage createFromText(String text);
	public static AsftOneBotMessage createFromCqString(String cqstr);
	public static AsftOneBotMessage createFromJsonString(String js);
	public static AsftOneBotMessage createEmpty();


	public String toString();
	public String toCqString();
	public String toJsonString();
	public JSONArray toJSONArray();

	public boolean appendAsftOneBotMessage(AsftOneBotMessage secodary);
	public boolean appendCqString(String cqstr);
	public boolean appendJsonString(String jstr);
	public boolean appendJsonObject(JSONObject obj);

	public boolean appendText(String text);
	public boolean appendFace(String id);
	public boolean appendFace(int id);

	public boolean appendPicture(String file,String url,int timeout,boolean cache,boolean proxy,boolean flash);

	public boolean appendPicture(String file,int timeout,boolean cache,boolean proxy,boolean flash);
	public boolean appendPicture(String file,int timeout,boolean cache,boolean proxy);
	public boolean appendPicture(String file,int timeout);
	public boolean appendPicture(String file);
	public boolean appendFlashPicture(String file);

	public boolean appendPicture(String file,String url);
	public boolean appendFlashPicture(String file,String url);

	public boolean appendRecord(String file,String url,int timeout,boolean cache,boolean proxy,boolean magic);

	public boolean appendRecord(String file,int timeout,boolean cache,boolean proxy,boolean magic);
	public boolean appendRecord(String file,int timeout,boolean cache,boolean proxy);
	public boolean appendRecord(String file,int timeout);
	public boolean appendRecord(String file);
	public boolean appendMagicRecord(String file);

	public boolean appendRecord(String file,String url);
	public boolean appendMagicRecord(String file,String url);


	public boolean appendVideo(String file,String url,int timeout,boolean cache,boolean proxy);

	public boolean appendVideo(String file,int timeout,boolean cache,boolean proxy);
	public boolean appendVideo(String file,int timeout);
	public boolean appendVideo(String file);

	public boolean appendVideo(String file,String url);


	public boolean appendAt(String target);
	public boolean appendNoParaType(String type);  //rps,dice,shake

	public boolean appendPoke(String type,String id);
	public boolean appendPoke(int type, int id);

	public boolean appendAnonymous(String target,boolean ignore);

	public boolean appendShare(String url,String title, String content, String image);
	public boolean appendShare(String url,String title);

	public boolean appendLocation(String lat,String lon,String title, String content);
	public boolean appendLocation(String lat,String lon);

	public boolean appendContact(String id,boolean isgroup);

	public boolean appendMusic(String type, String id);
	public boolean appendMusic(String url, String audio, String title, String content, String image);
	public boolean appendMusic(String url, String audio, String title);


	public boolean appendReply(String id);
	public boolean appendForward(String id);

	public boolean appendNode(String id);
	public boolean appendNode(String user_id,String nickname, String content);
	public boolean appendNode(String user_id, String nickname, AsftOneBotMessage content);
	public boolean appendCodeMessage(String type, String data);  //json,xml


	public int length();

	public Vector<String> getElementTypeVector();
	public String getFirstElementType();
	public String getLastElementType();
	public String getElementType(int index);


	public Vector<Integer> getIndexVectorOf(String type);
	public int getFirstIndexOf(String type)
	public int getLastIndexOf(String type)


	public Vector<String> getTextVector()
	public String getText(int index)


	public String getElementDataValue(int index,String data_key);
	public Vector<String> getElementDataValueVector(String type, String data_key);
	public Vector<String> getElementDataValueVector(String data_key);
	public Vector<String> getElementDataValueVector(Vector<Integer> index_vct, String data_key);
}


public abstract class AsftOneBotEvent
{
	public static class Sender
	{
		public long user_id;
		public String nickname;
		public int age;

		public String getSex();
		public boolean isMale();
		public boolean isFemale();
		public boolean isAdult();
		public boolean isGroupSender();

		public Sender(Sender src);

		public boolean equals(Sender tar);
		public boolean equals(Anonymous tar);

		public JSONObject toJSONObject();

		@Override
		public String toString();
	}
	public static final class GroupSender extends Sender
	{
		public String card;
		public String area;
		public String level;
		public String title;

		public boolean isOwner();
		public boolean isAdmin();
		public String getRole();

		public GroupSender(GroupSender src);

		@Override
		public JSONObject toJSONObject();
	}
	public static final class Anonymous
	{
		public long id;
		public String name;
		public String flag;

		public Anonymous(Anonymous src);

		public boolean equals(Anonymous tar);
		public boolean equals(Sender tar);

		public JSONObject toJSONObject();

		@Override
		public String toString();
	}
	public static final class GroupFile
	{
		public String id;
		public String name;
		public long size;
		public long busid;

		public GroupFile(GroupFile src);

		public JSONObject toJSONObject();

		@Override
		public String toString();
	}

	public static AsftOneBotEvent createFromJsonString(String jstr);
	public static AsftOneBotEvent createFromJSONObject(JSONObject obj);

	public long time;
	public long self_id;

	public String getPostType();
	public boolean isMessageEvent();
	public boolean isNoticeEvent();
	public boolean isRequestEvent();
	public boolean isMetaEvent();

	public abstract long getUserId();
	public abstract long getOperatorId();
	public abstract long getGroupId();
	public abstract long getTargetId();
	public abstract String getSecondaryType();
	public abstract String getSubType();
	public abstract String getMainParameter();
	public abstract boolean isGroupEvent();
	public abstract boolean isPrivateEvent();

	public boolean sameGroup(AsftOneBotEvent tar);
	public boolean sameUser(AsftOneBotEvent tar);
	public boolean sameTarget(AsftOneBotEvent tar);

	public JSONObject toJSONObject();

	@Override
	public String toString();

	public static abstract class MessageEvent extends AsftOneBotEvent
	{
		public long message_id;
		public long user_id;
		public String raw_message;
		public int font;
		public String message;
		public Sender sender;

		@Override
		public boolean isPrivateEvent();
		@Override
		public boolean isGroupEvent();

		@Override
		public long getUserId();
		@Override
		public long getOperatorId();
		@Override
		public String getMainParameter();
		@Override
		public String getSecondaryType();

		public abstract String getMessageType();

		@Override
		public JSONObject toJSONObject();
	}
	public static class PrivateMessageEvent extends MessageEvent
	{
		public boolean isFriendMessageEvent();
		public boolean isGroupTempMessageEvent();
		public boolean isOtherMessageEvent();

		@Override
		public String getMessageType();
		@Override
		public long getGroupId();
		@Override
		public long getTargetId();
		@Override
		public String getSubType();
	}
	public static class GroupMessageEvent extends MessageEvent
	{
		public long group_id;
		public boolean isNormalMessageEvent();
		public boolean isAnonymousMessageEvent();
		public boolean isNoticeMessageEvent();

		public Anonymous getAnonymous();

		@Override
		public long getGroupId();
		@Override
		public long getTargetId();
		@Override
		public String getMessageType();
		@Override
		public String getSubType();

		@Override
		public JSONObject toJSONObject();
	}

	public static abstract class NoticeEvent extends AsftOneBotEvent
	{
		public long user_id;

		public boolean isGroupFileUploadEvent();
		public boolean isGroupAdminEvent();
		public boolean isGroupMemberDecreaseEvent();
		public boolean isGroupMemberIncreaseEvent();
		public boolean isGroupMemberBanEvent();
		public boolean isGroupMessageRecallEvent();
		public boolean isGroupInteractiveEvent();
		public boolean isFriendAddEvent();
		public boolean isFriendMessageRecallEvent();

		@Override 
		public boolean isGroupEvent();
		@Override 
		public boolean isPrivateEvent();
		@Override 
		public long getUserId();

		@Override
		public String getSecondaryType();
		
		public abstract String getNoticeType();

		@Override
		public JSONObject toJSONObject();
	}
	public static class GroupFileUploadEvent extends NoticeEvent
	{
		public long group_id;
		public GroupFile file;

		@Override
		public String getNoticeType();
		@Override
		public String getSubType();
		@Override
		public String getMainParameter();
		@Override
		public long getGroupId();
		@Override
		public long getTargetId();
		@Override
		public long getOperatorId();

		@Override
		public JSONObject toJSONObject();
	}
	public static class GroupAdminEvent extends NoticeEvent
	{
		public long group_id;

		public boolean isSetAdminEvent();
		public boolean isUnsetAdminEvent();

		@Override
		public String getNoticeType();
		@Override
		public String getSubType();
		@Override
		public String getMainParameter();
		@Override
		public long getGroupId();
		@Override
		public long getTargetId();
		@Override
		public long getOperatorId();

		@Override
		public JSONObject toJSONObject();
	}
	public static class GroupMemberDecreaseEvent extends NoticeEvent
	{
		public long group_id;
		public long operator_id;

		public boolean isLeaveEvent();
		public boolean isKickEvent();
		public boolean isKickMeEvent();

		@Override
		public String getNoticeType();
		@Override
		public String getSubType();
		@Override
		public String getMainParameter();
		@Override
		public long getGroupId();
		@Override
		public long getTargetId();
		@Override
		public long getOperatorId();

		@Override
		public JSONObject toJSONObject();
	}

	public static class GroupMemberIncreaseEvent extends NoticeEvent
	{
		public long group_id;
		public long operator_id;

		public boolean isApproveEvent();
		public boolean isInviteEvent();

		@Override
		public String getNoticeType();
		@Override
		public String getSubType();
		@Override
		public String getMainParameter();
		@Override
		public long getGroupId();
		@Override
		public long getTargetId();
		@Override
		public long getOperatorId();

		@Override
		public JSONObject toJSONObject();
	}

	public static class GroupMemberBanEvent extends NoticeEvent
	{
		public long group_id;
		public long operator_id;
		public long duration;

		public boolean isSetBanEvent();
		public boolean isLiftBanEvent();

		@Override
		public String getNoticeType();
		@Override
		public String getSubType();
		@Override
		public String getMainParameter();
		@Override
		public long getGroupId();
		@Override
		public long getTargetId();
		@Override
		public long getOperatorId();

		@Override
		public JSONObject toJSONObject();
	}
	public static class GroupMessageRecallEvent extends NoticeEvent
	{
		public long group_id;
		public long operator_id;
		public long message_id;

		@Override
		public String getNoticeType();
		@Override
		public String getSubType();
		@Override
		public String getMainParameter();
		@Override
		public long getGroupId();
		@Override
		public long getTargetId();
		@Override
		public long getOperatorId();

		@Override
		public JSONObject toJSONObject();
	}

	public static class GroupInteractiveEvent extends NoticeEvent
	{
		public long group_id;
		public long target_id;

		public boolean isPokeEvent();
		public boolean isLuckyKingEvent();
		public boolean isHonorEvent();
		public boolean isLongwangEvent();
		public boolean isQunliaozhihuoEvent();
		public boolean isKuaileyuanquanEvent();

		public String getHonorType();
		@Override
		public String getNoticeType();
		@Override
		public String getSubType();
		@Override
		public String getMainParameter();
		@Override
		public long getGroupId();
		@Override
		public long getTargetId();
		@Override
		public long getOperatorId();

		@Override
		public JSONObject toJSONObject();
	}
	public static class FriendAddEvent extends NoticeEvent
	{
		@Override
		public String getNoticeType();
		@Override
		public String getSubType();
		@Override
		public String getMainParameter();
		@Override
		public long getGroupId();
		@Override
		public long getTargetId();
		@Override
		public long getOperatorId();
	}
	public static class FriendMessageRecallEvent extends NoticeEvent
	{
		public long message_id;

		@Override
		public String getNoticeType();
		@Override
		public String getSubType();
		@Override
		public String getMainParameter();
		@Override
		public long getGroupId();
		@Override
		public long getTargetId();
		@Override
		public long getOperatorId();

		@Override
		public JSONObject toJSONObject();
	}
	public static class RequestEvent extends AsftOneBotEvent
	{
		public long user_id;
		public long group_id;
		public String comment;
		public String flag;

		public boolean isFriendAddRequestEvent();
		public boolean isGroupAddRequestEvent();
		public boolean isGroupInviteRequestEvent();
		
		public String getRequestType();
		public String getComment();
		public String getFlag();

		@Override
		public String getSecondaryType();
		@Override
		public boolean isGroupEvent();
		@Override
		public boolean isPrivateEvent();
		@Override
		public long getUserId();
		@Override
		public long getGroupId();
		@Override
		public long getTargetId();
		@Override
		public long getOperatorId();
		@Override
		public String getMainParameter();
		@Override
		public String getSubType();

		public RequestEvent();

		@Override
		public JSONObject toJSONObject();
	}

	public static class LifeCycleEvent extends AsftOneBotEvent
	{
		@Override
		public String getSecondaryType();
		@Override
		public boolean isGroupEvent();
		@Override
		public boolean isPrivateEvent();
		@Override
		public long getUserId();
		@Override
		public long getGroupId();
		@Override
		public long getOperatorId();
		@Override
		public long getTargetId();
		@Override
		public String getMainParameter();
		@Override
		public String getSubType();

		@Override
		public JSONObject toJSONObject();
	}

	public static class HeartBeatEvent extends AsftOneBotEvent
	{
		public String status;
		public long interval;

		@Override
		public String getSecondaryType();
		@Override
		public boolean isGroupEvent();
		@Override
		public boolean isPrivateEvent();
		@Override
		public long getUserId();
		@Override
		public long getGroupId();
		@Override
		public long getOperatorId();
		@Override
		public long getTargetId();
		@Override
		public String getMainParameter();
		@Override
		public String getSubType();

		@Override
		public JSONObject toJSONObject();
	}
}

public final class AsftOneBotApi
{
	public static final class ApiRequest
	{
		public ApiRequest();
		public ApiRequest(String action);
		public ApiRequest setAllParameters(String json);
		public ApiRequest setAllParameters(JSONObject obj);
		public ApiRequest setParameter(String key, String value);
		public ApiRequest setAction(String action);
		public ApiRequest setAsync();
		public ApiRequest unsetAsync();
		public ApiRequest setRateLimited();
		public ApiRequest unsetRateLimited();

		@Override
		public String toString();

		public boolean send(AwpBotInterface bot);
	}
	public static class ApiReturn
	{
		protected String status;
		protected int retcode;
		protected JSONObject data;
		public ApiReturn(String json);
		public ApiReturn(JSONObject jsonobj);
		public String getData();
		public String getDataValue(String key);
		public String getStatus();
		public int getRetcode(String key);
	}

	public static boolean AutoSetAsync = false;
	public static boolean AutoSetRateLimited = false;

	public static boolean isApiReturn(String event);
	public static boolean isApiReturn(JSONObject eventobj);
	public static ApiRequest SendPrivateMessage_text(long user_id,String text);
	public static ApiRequest SendPrivateMessage_cqstr(long user_id,String cqstr);
	public static ApiRequest SendPrivateMessage_json(long user_id,String json);
	public static ApiRequest SendPrivateMessage_json(long user_id,JSONObject json);
	public static ApiRequest SendGroupMessage_text(long group_id,String text);
	public static ApiRequest SendGroupMessage_cqstr(long group_id,String cqstr);
	public static ApiRequest SendGroupMessage_json(long group_id,String json);
	public static ApiRequest SendGroupMessage_json(long group_id,JSONObject json);
	public static ApiRequest DeleteMessage(long message_id);
	public static ApiRequest SendLike(long user_id);
	public static ApiRequest SendLike(long user_id,int times);
	public static ApiRequest SetGroupKick(long group_id, long user_id);
	public static ApiRequest SetGroupKick(long group_id, long user_id, boolean reject_add_request);
	public static ApiRequest SetGroupBan_unset(long group_id, long user_id);
	public static ApiRequest SetGroupBan(long group_id, long user_id, long duration)
	public static ApiRequest SetGroupAnonymousBan(long group_id, String flag, long duration);
	public static ApiRequest SetGroupWholeBan(long group_id);
	public static ApiRequest SetGroupWholeBan_unset(long group_id);
	public static ApiRequest SetGroupWholeBan;
	public static ApiRequest SetGroupAdmin(long group_id, long user_id);
	public static ApiRequest SetGroupAdmin_unset(long group_id, long user_id);
	public static ApiRequest SetGroupAdmin(long group_id, long user_id, boolean enable);
	public static ApiRequest SetGroupAnonymous(long group_id);
	public static ApiRequest SetGroupAnonymous_unset(long group_id);
	public static ApiRequest SetGroupAnonymous(long group_id, boolean enable);
	public static ApiRequest SetGroupCard(long group_id, long user_id, String card);
	public static ApiRequest SetGroupName(long group_id, String name);
	public static ApiRequest SetGroupLeave(long group_id);
	public static ApiRequest SetGroupSpecialTitle(long group_id,long user_id,String special_title);
	public static ApiRequest SetFriendAddRequest(String flag, boolean approve);
	public static ApiRequest SetFriendAddRequest(String flag, boolean approve,String remark);
	public static ApiRequest SetGroupAddRequest_add(String flag, boolean approve);
	public static ApiRequest SetGroupAddRequest_invite(String flag, boolean approve);
	
	public static ApiRequest GetMessage(long message_id);
	public static ApiRequest GetForwardMessage(String id);
}

public class AwpBotComponentParent implements AwpBotComponent
{
	@Override
	public boolean save(AwpBotInterface bot);
	@Override
	public boolean load(AwpBotInterface bot);
	@Override
	public String getComponentName();
	public AwpBotComponentParent(){}

	public String handle(String event, AwpBotInterface bot); //Handle api and event here. You should not modify or override this default method.
	protected String handleApiReturn(AsftOneBotApi.ApiReturn apiret, AwpBotInterface bot) //Handle Api return here.
	protected String handelMessageEvent(AsftOneBotEvent.MessageEvent mevt, AwpBotInterface bot) //Handle message event here. You should not modify or override this default method.
	protected String handelPrivateMessageEvent(AsftOneBotEvent.PrivateMessageEvent mevt, AwpBotInterface bot) //Handle private message event here if use default handelMessageEvent method.
	protected String handelGroupMessageEvent(AsftOneBotEvent.GroupMessageEvent mevt, AwpBotInterface bot) //Handle  group message event here if use default handelMessageEvent method.
	protected String handelNoticeEvent(AsftOneBotEvent.NoticeEvent nevt, AwpBotInterface bot) //Handle Notice Event Here.
	protected String handelRequestEvent(AsftOneBotEvent.RequestEvent revt, AwpBotInterface bot) //Handle Request Event Here.
	protected String handelMetaEvent(AsftOneBotEvent mevt, AwpBotInterface bot) //Handle Meta Event Here (Who Care?)
}

import java.lang.*;
import org.json.*;
import java.util.*;
import java.net.*;

import org.java_websocket.WebSocket;
import org.java_websocket.client.WebSocketClient;
import org.java_websocket.handshake.ServerHandshake;

public abstract class AwpBotBridge implements AwpBotComponent
{

	public abstract void config(); //Override it. Set AccessToken and WsUri.

	public void stop();
	public AwpBotBridge();
	protected AwpBotBridge setEventWsUri(String eventuri);
	protected AwpBotBridge setApiWsUri(String apiuri);
	protected AwpBotBridge setUniversalWsUri(String uuri);
	protected AwpBotBridge setAccessToken(String token);
	@Override
	public String getComponentName();
	@Override
	public boolean save(AwpBotInterface bot);
	@Override
	public boolean load(AwpBotInterface bot);
	@Override
	public String handle(String event, AwpBotInterface bot);
}